{"version":3,"sources":["components/BTBpmDisplay/BTBpmDisplayViewModel.tsx","helpers/getBpmInMillisecondFormat.tsx","helpers/getTextGradient.ts","theme/customTheme.ts","resources/sounds/tap-sound.wav","components/BTBpmDisplay/BTBpmDisplay.tsx","components/BTFooter/BTFooter.tsx","components/ColorModeSwitcher/ColorModeSwitcher.tsx","components/BTHeader/BTHeader.tsx","App.tsx","index.tsx"],"names":["lastTapTime","getBpmInMillisecondFormat","bpm","integers","Math","floor","bpmPreparedForDecimals","round","amountIntegerDigits","toString","length","decimalPlaces","slice","textGradient","customTheme","theme","config","initialColorMode","lastTapTimeDifferences","useBTBpmDisplayViewModel","props","useState","setBpm","isCalculating","setCalculating","toast","useToast","tapAudio","Audio","tapSound","keyDownHandler","useCallback","currentTapTime","Date","getTime","currentTapTimeDifference","push","averageTimeDifference","forEach","timeDifference","calculateBpm","playAudio","paused","play","catch","currentTime","rawFontSizeKeyframeValue","rawBpmFontSize","substring","indexOf","rawAdjustedFontSizeKeyframeValue","parseInt","fontSizeKeyframeValueWithUnit","animationControls","start","fontSize","transition","duration","useEffect","window","addEventListener","removeEventListener","copyBpmToClipboard","bpmInMSFormat","copiedValue","showMilliseconds","navigator","clipboard","writeText","then","title","description","status","isClosable","resetBpm","BTBpmDisplay","isSmallViewport","useBreakpointValue","base","md","useAnimation","bpmFontSize","lg","fontSizes","viewModelProps","viewModel","spacing","onTouchStart","in","mb","hasArrow","label","placement","onClick","undefined","cursor","bgGradient","bgClip","motion","span","animate","initialScale","colorScheme","variant","onMouseDown","e","preventDefault","display","BTFooter","as","justify","py","alignSelf","href","target","rel","fontWeight","ColorModeSwitcher","toggleColorMode","useColorMode","switchLabel","useColorModeValue","SwitchIcon","FaMoon","FaSun","domProps","size","color","icon","gitHubButtonLabel","BTHeader","isMobileMenuOpen","setIsMobileMenuOpen","VolumeSwitchIcon","FaVolumeUp","FaVolumeMute","volumeSwitchText","checkboxSize","titleSize","buttonFontSize","justifySelf","whiteSpace","checkbox","isChecked","onChange","setShowMilliseconds","volumeControl","setPlayAudio","ml","gitHubButton","leftIcon","Link","MobileMenuButton","order","sx","WebkitTapHighlightColor","toggled","toggle","rounded","templateColumns","gap","alignItems","isOpen","onClose","borderBottomWidth","mt","justifyContent","App","setColorMode","textAlign","height","maxW","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ed742f9.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useToast } from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport tapSound from \"../../resources/sounds/tap-sound.wav\";\nimport {\n  BTBpmDisplayViewModel,\n  BTBpmDisplayViewModelProps,\n} from \"./BTBpmDisplayInterfaces\";\n\nlet lastTapTime: number;\nlet lastTapTimeDifferences: number[] = [];\n\nexport const useBTBpmDisplayViewModel = (\n  props: BTBpmDisplayViewModelProps\n): BTBpmDisplayViewModel => {\n  const [bpm, setBpm] = useState<number>(0);\n  const [isCalculating, setCalculating] = useState<boolean>(false);\n\n  const toast = useToast();\n\n  const calculateBpm = () => {\n    // General explanation (as I understand it):\n    // If all taps had 1 second (= 1000ms) between them, then this would equal 60 BPM => This is our point of reference.\n    // => So if all taps had 0.5 seconds time between them, then this would equal 120 BPM for example.\n    // The formula when having the time difference is: 1000 / timeDifference * 60 BPM = tappedBPM\n\n    // 1. Take the time between the last tap and this current tap\n    const currentTapTime = new Date().getTime();\n    const currentTapTimeDifference = currentTapTime - lastTapTime;\n\n    // Do not calculate or set the bpm on the first tap (You need at least two taps to calculate the bpm).\n    if (lastTapTime) {\n      // 2. Store all previous time differences between taps, add them up and divide their sum by their amount to get the average time difference\n\n      // 2.1 Store all previous time differences between taps\n      // Handling arrays as lists in JS: https://alligator.io/js/push-pop-shift-unshift-array-methods/\n      lastTapTimeDifferences.push(currentTapTimeDifference);\n\n      // 2.2 Add up the time differences and divide the sum by the amount of stored time differences to get the average\n      let averageTimeDifference = 0;\n      lastTapTimeDifferences.forEach((timeDifference) => {\n        averageTimeDifference += timeDifference;\n      });\n      averageTimeDifference /= lastTapTimeDifferences.length;\n\n      // 3. Convert the time difference into the corresponding BPM\n      const currentBPM = (1000 / averageTimeDifference) * 60;\n\n      setBpm(currentBPM);\n    }\n\n    lastTapTime = currentTapTime;\n  };\n\n  const resetBpm = () => {\n    lastTapTime = 0;\n    lastTapTimeDifferences = [];\n    setCalculating(false);\n    setBpm(0);\n  };\n\n  const tapAudio = new Audio(tapSound);\n\n  const playTapSound = () => {\n    if (tapAudio.paused) {\n      tapAudio.play().catch(() => {});\n    } else {\n      tapAudio.currentTime = 0;\n    }\n  };\n\n  const keyDownHandler = useCallback(() => {\n    if (!isCalculating) {\n      setCalculating(true);\n    }\n    calculateBpm();\n\n    if (props.playAudio) {\n      playTapSound();\n    }\n\n    // BPM Value without unit\n    const rawFontSizeKeyframeValue = props.rawBpmFontSize.substring(\n      0,\n      props.rawBpmFontSize.indexOf(\"rem\")\n    );\n\n    // Put `+` in front of the variable to get addition instead of string concatenation\n    const rawAdjustedFontSizeKeyframeValue =\n      +rawFontSizeKeyframeValue + parseInt(rawFontSizeKeyframeValue, 10) * 0.05;\n\n    const fontSizeKeyframeValueWithUnit = `${rawAdjustedFontSizeKeyframeValue}rem`;\n\n    props.animationControls\n      .start({\n        fontSize: [\n          props.rawBpmFontSize,\n          fontSizeKeyframeValueWithUnit,\n          props.rawBpmFontSize,\n        ],\n        transition: { duration: 0.3 },\n      })\n      .catch(() => {});\n  }, [\n    isCalculating,\n    props.animationControls,\n    props.playAudio,\n    props.rawBpmFontSize,\n  ]);\n\n  const copyBpmToClipboard = () => {\n    const integers = Math.floor(bpm);\n    const bpmPreparedForDecimals = Math.round(bpm * 10000);\n    const amountIntegerDigits = integers.toString().length;\n    const decimalPlaces = bpmPreparedForDecimals\n      .toString()\n      .slice(amountIntegerDigits);\n\n    const bpmInMSFormat = `${integers}.${decimalPlaces}`;\n\n    const copiedValue = props.showMilliseconds\n      ? bpmInMSFormat\n      : Math.round(bpm).toString();\n\n    navigator.clipboard\n      .writeText(copiedValue)\n      .then(() => {\n        toast({\n          title: \"BPM Copied!\",\n          description: \"The BPM were copied to your clipboard.\",\n          status: \"info\",\n          duration: 9000,\n          isClosable: true,\n        });\n      })\n      .catch(() => {\n        toast({\n          title: \"Something went wrong.\",\n          description: \"The BPM could not be copied to your clipboard.\",\n          status: \"error\",\n          duration: 9000,\n          isClosable: true,\n        });\n      });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDownHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownHandler);\n    };\n  }, [keyDownHandler]);\n\n  return {\n    isCalculating,\n    copyBpmToClipboard,\n    bpm,\n    resetBpm,\n    keyDownHandler,\n  };\n};\n","export const getBpmInMillisecondFormat = (bpm: number): string => {\n  const integers = Math.floor(bpm);\n  const bpmPreparedForDecimals = Math.round(bpm * 10000);\n  const amountIntegerDigits = integers.toString().length;\n  const decimalPlaces = bpmPreparedForDecimals\n    .toString()\n    .slice(amountIntegerDigits);\n\n  return `${integers}.${decimalPlaces || \"0000\"}`;\n};\n","export const textGradient = \"linear(to-r, teal.300, blue.400)\";\n","import { Theme, theme } from \"@chakra-ui/react\";\n\nexport const customTheme: Theme = {\n  ...theme,\n  config: {\n    ...theme.config,\n    initialColorMode: \"dark\",\n  },\n};\n","export default __webpack_public_path__ + \"static/media/tap-sound.2fc7e0f6.wav\";","import {\n  Button,\n  Collapse,\n  Kbd,\n  ScaleFade,\n  Stat,\n  StatHelpText,\n  StatNumber,\n  Text,\n  Tooltip,\n  useBreakpointValue,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport { getBpmInMillisecondFormat } from \"../../helpers/getBpmInMillisecondFormat\";\nimport { textGradient } from \"../../helpers/getTextGradient\";\nimport { customTheme } from \"../../theme/customTheme\";\nimport {\n  BTBpmDisplayProps,\n  BTBpmDisplayViewModel,\n  BTBpmDisplayViewModelProps,\n} from \"./BTBpmDisplayInterfaces\";\nimport { useBTBpmDisplayViewModel } from \"./BTBpmDisplayViewModel\";\n\nfunction BTBpmDisplay(props: BTBpmDisplayProps): JSX.Element {\n  const isSmallViewport = useBreakpointValue({ base: true, md: false });\n  const animationControls = useAnimation();\n\n  const bpmFontSize = useBreakpointValue({ base: \"7xl\", md: \"8xl\", lg: \"9xl\" });\n  const rawBpmFontSize =\n    customTheme.fontSizes[bpmFontSize as keyof typeof customTheme.fontSizes];\n\n  const viewModelProps: BTBpmDisplayViewModelProps = {\n    animationControls,\n    rawBpmFontSize,\n    ...props,\n  };\n  const viewModel: BTBpmDisplayViewModel =\n    useBTBpmDisplayViewModel(viewModelProps);\n  const { isCalculating, copyBpmToClipboard, bpm, resetBpm, keyDownHandler } =\n    viewModel;\n\n  return (\n    <>\n      <VStack\n        spacing={3}\n        onTouchStart={() => {\n          keyDownHandler();\n        }}\n      >\n        <Collapse in={!isCalculating}>\n          <Text fontSize={{ base: \"md\", md: \"xl\", lg: \"2xl\" }} mb={3}>\n            Tap any key to start ⌨️\n          </Text>\n          <Text fontSize={{ base: \"xs\", md: \"sm\", lg: \"md\" }}>\n            💡 For example the <Kbd>Spacebar</Kbd>\n          </Text>\n        </Collapse>\n        <Tooltip hasArrow label=\"Click to copy\" placement=\"right\">\n          <Stat\n            onClick={isSmallViewport ? undefined : copyBpmToClipboard}\n            cursor=\"copy\"\n          >\n            <StatNumber\n              fontSize={bpmFontSize}\n              bgGradient={textGradient}\n              bgClip=\"text\"\n            >\n              <motion.span animate={animationControls}>\n                {props.showMilliseconds\n                  ? getBpmInMillisecondFormat(bpm)\n                  : Math.round(bpm)}\n              </motion.span>\n            </StatNumber>\n            <StatHelpText fontSize={{ base: \"lg\", md: \"xl\", lg: \"2xl\" }}>\n              BPM\n            </StatHelpText>\n          </Stat>\n        </Tooltip>\n        <ScaleFade initialScale={0.9} in={isCalculating}>\n          {/* `e.preventDefault()` in `onMouseDown` will prevent focusing the button after it is clicked\n          This is important when users use the spacebar or enter for tapping, as having it focused would lead\n          to problems then */}\n          <Button\n            colorScheme=\"blue\"\n            variant=\"outline\"\n            onMouseDown={(e) => e.preventDefault()}\n            onClick={isCalculating ? resetBpm : undefined}\n            cursor={isCalculating ? undefined : \"default\"}\n            display={isCalculating ? undefined : \"none\"}\n          >\n            Reset\n          </Button>\n        </ScaleFade>\n      </VStack>\n    </>\n  );\n}\n\nexport default BTBpmDisplay;\n","import { Flex, Link } from \"@chakra-ui/react\";\nimport { textGradient } from \"../../helpers/getTextGradient\";\n\nexport const BTFooter = (): JSX.Element => (\n  <Flex as=\"footer\" justify=\"center\" py={3} alignSelf=\"flex-end\">\n    <Link\n      href=\"https://www.cbussick.dev/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      bgGradient={textGradient}\n      bgClip=\"text\"\n      fontWeight=\"semibold\"\n      fontSize={{ base: \"md\", md: \"lg\", lg: \"xl\" }}\n    >\n      Made by Christopher Bussick\n    </Link>\n  </Flex>\n);\n","import {\n  IconButton,\n  Tooltip,\n  useColorMode,\n  useColorModeValue\n} from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\nimport { ColorModeSwitcherProps } from \"./ColorModeSwitcherInterfaces\";\n\nexport const ColorModeSwitcher = (\n  props: ColorModeSwitcherProps\n): JSX.Element => {\n  const { toggleColorMode } = useColorMode();\n  const switchLabel = `Switch to ${useColorModeValue(\"dark\", \"light\")} mode`;\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  const { isSmallViewport, ...domProps } = props;\n\n  return (\n    <Tooltip hasArrow label={switchLabel}>\n      <IconButton\n        size=\"md\"\n        fontSize={{ base: \"sm\", md: \"md\", lg: \"lg\" }}\n        variant={isSmallViewport ? \"outline\" : \"ghost\"}\n        color=\"current\"\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label={switchLabel}\n        {...domProps}\n      />\n    </Tooltip>\n  );\n};\n","import {\n  Box,\n  Button,\n  Checkbox,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Grid,\n  Heading,\n  HStack,\n  IconButton,\n  Link,\n  Spacer,\n  Stack,\n  Tooltip,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\nimport { Rotate as Hamburger } from \"hamburger-react\";\nimport React, { useState } from \"react\";\nimport { FaGithub, FaVolumeMute, FaVolumeUp } from \"react-icons/fa\";\nimport { textGradient } from \"../../helpers/getTextGradient\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher/ColorModeSwitcher\";\nimport { BTHeaderProps } from \"./BTHeaderInterfaces\";\n\nconst gitHubButtonLabel = \"Repo on GitHub\";\n\nexport const BTHeader = (props: BTHeaderProps): JSX.Element => {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState<boolean>(false);\n\n  const VolumeSwitchIcon = props.playAudio ? FaVolumeUp : FaVolumeMute;\n  const volumeSwitchText = `Turn volume ${props.playAudio ? \"off\" : \"on\"}`;\n\n  const checkboxSize = useBreakpointValue({ base: \"md\", lg: \"lg\" });\n  const titleSize = useBreakpointValue({ base: \"md\", lg: \"lg\" });\n  const buttonFontSize = useBreakpointValue({ base: \"lg\" });\n\n  const isSmallViewport = useBreakpointValue({ base: true, md: false });\n\n  const title = (\n    <Heading\n      size={titleSize}\n      bgGradient={textGradient}\n      bgClip=\"text\"\n      justifySelf=\"center\"\n      whiteSpace=\"nowrap\"\n    >\n      BPM tapper\n    </Heading>\n  );\n\n  const checkbox = (\n    <Checkbox\n      isChecked={props.showMilliseconds}\n      onChange={() =>\n        props.setShowMilliseconds((showMilliseconds) => !showMilliseconds)\n      }\n      size={checkboxSize}\n      whiteSpace=\"nowrap\"\n    >\n      Show milliseconds\n    </Checkbox>\n  );\n\n  const volumeControl = (\n    <Tooltip hasArrow label={volumeSwitchText}>\n      <IconButton\n        variant={isSmallViewport ? \"outline\" : \"ghost\"}\n        aria-label={volumeSwitchText}\n        icon={<VolumeSwitchIcon />}\n        onClick={() => props.setPlayAudio((playAudio) => !playAudio)}\n        fontSize={buttonFontSize}\n        ml={isSmallViewport ? undefined : 4}\n      />\n    </Tooltip>\n  );\n\n  const gitHubButton = (\n    <Tooltip hasArrow label={gitHubButtonLabel}>\n      {isSmallViewport ? (\n        <Button\n          leftIcon={<FaGithub />}\n          colorScheme=\"blue\"\n          variant=\"link\"\n          fontWeight=\"normal\"\n          // Necessary to have a working link\n          as={Link}\n          href=\"https://github.com/ChristopherBussick/bpm-tapper\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {gitHubButtonLabel}\n        </Button>\n      ) : (\n        <IconButton\n          variant=\"ghost\"\n          aria-label={gitHubButtonLabel}\n          icon={<FaGithub />}\n          fontSize={buttonFontSize}\n          as={Link}\n          href=\"https://github.com/ChristopherBussick/bpm-tapper\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        />\n      )}\n    </Tooltip>\n  );\n\n  const MobileMenuButton = (\n    <Box\n      order={-1}\n      sx={{\n        \".hamburger-react\": {\n          // Remove blue flashing when tapping the mobile menu icon\n          //\n          // Note: This property is non-standard as of 2021.11.01\n          // See https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-tap-highlight-color\n          WebkitTapHighlightColor: \"transparent\",\n        },\n      }}\n    >\n      <Hamburger\n        toggled={isMobileMenuOpen}\n        toggle={setIsMobileMenuOpen}\n        label={isMobileMenuOpen ? \"Close menu\" : \"Show menu\"}\n        size={isSmallViewport ? 24 : 32}\n        rounded\n      />\n    </Box>\n  );\n\n  return (\n    <Grid\n      as=\"header\"\n      templateColumns=\"repeat(3, 1fr)\"\n      gap={6}\n      py={2}\n      alignSelf=\"flex-start\"\n      alignItems=\"center\"\n    >\n      {!isSmallViewport && <Spacer />}\n      {title}\n      {isSmallViewport ? (\n        MobileMenuButton\n      ) : (\n        <Flex justifySelf=\"flex-end\">\n          {checkbox}\n          {volumeControl}\n          {gitHubButton}\n          <ColorModeSwitcher isSmallViewport={isSmallViewport} />\n        </Flex>\n      )}\n      <Drawer\n        isOpen={isMobileMenuOpen}\n        placement=\"left\"\n        onClose={() => setIsMobileMenuOpen(false)}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">{title}</DrawerHeader>\n\n          <DrawerBody mt={2}>\n            <Stack spacing={4} alignItems=\"flex-start\">\n              {checkbox}\n              <HStack>\n                {volumeControl}\n                <ColorModeSwitcher isSmallViewport={isSmallViewport} />\n              </HStack>\n              {gitHubButton}\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter justifyContent=\"flex-start\">\n            <Link\n              href=\"https://www.cbussick.dev/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              bgGradient={textGradient}\n              bgClip=\"text\"\n              fontWeight=\"semibold\"\n              fontSize={{ base: \"md\", md: \"lg\", lg: \"xl\" }}\n            >\n              Made by Christopher Bussick\n            </Link>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </Grid>\n  );\n};\n","import { Container, Grid, Text, useColorMode } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport BTBpmDisplay from \"./components/BTBpmDisplay/BTBpmDisplay\";\nimport { BTFooter } from \"./components/BTFooter/BTFooter\";\nimport { BTHeader } from \"./components/BTHeader/BTHeader\";\nimport { customTheme } from \"./theme/customTheme\";\n\nexport const App = (): JSX.Element => {\n  const [showMilliseconds, setShowMilliseconds] = useState<boolean>(false);\n  const [playAudio, setPlayAudio] = useState<boolean>(true);\n\n  const { setColorMode } = useColorMode();\n\n  useEffect(() => {\n    // For whatever reason, when having `initialColorMode === \"dark\"` it directly switches back to \"light\".\n    // This is a workaround, to manually set it to dark mode on the first render of the app.\n    if (customTheme.config.initialColorMode === \"dark\") {\n      setColorMode(\"dark\");\n    }\n  }, [setColorMode]);\n\n  return (\n    <Grid\n      templateColumns=\"repeat(1fr, 3)\"\n      gap={6}\n      textAlign=\"center\"\n      height=\"100vh\"\n    >\n      <BTHeader\n        showMilliseconds={showMilliseconds}\n        setShowMilliseconds={setShowMilliseconds}\n        playAudio={playAudio}\n        setPlayAudio={setPlayAudio}\n      />\n\n      <Container maxW=\"8xl\">\n        <Text fontSize={{ base: \"lg\", md: \"3xl\", lg: \"4xl\" }} mb={9}>\n          Tap along to any song to figure out its tempo! 🎵\n        </Text>\n\n        <BTBpmDisplay\n          playAudio={playAudio}\n          showMilliseconds={showMilliseconds}\n        />\n      </Container>\n\n      <BTFooter />\n    </Grid>\n  );\n};\n","import { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { customTheme } from \"./theme/customTheme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={customTheme.config.initialColorMode} />\n    <ChakraProvider theme={customTheme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}