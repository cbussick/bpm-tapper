{"version":3,"sources":["components/BTBpmDisplay/BTBpmDisplayViewModel.tsx","helpers/getBpmInMillisecondFormat.tsx","helpers/getTextGradient.ts","resources/sounds/tap-sound.wav","components/BTBpmDisplay/BTBpmDisplay.tsx","components/BTFooter/BTFooter.tsx","components/ColorModeSwitcher/ColorModeSwitcher.tsx","components/BTHeader/BTHeader.tsx","theme/customTheme.ts","App.tsx","index.tsx"],"names":["lastTapTime","getBpmInMillisecondFormat","bpm","integers","Math","floor","bpmPreparedForDecimals","round","amountIntegerDigits","toString","length","decimalPlaces","slice","textGradient","lastTapTimeDifferences","useBTBpmDisplayViewModel","props","audioTapRef","useRef","useState","setBpm","isCalculating","setCalculating","toast","useToast","keyDownHandler","useCallback","currentTapTime","Date","getTime","currentTapTimeDifference","push","averageTimeDifference","forEach","timeDifference","calculateBpm","playAudio","current","paused","play","catch","currentTime","playTapSound","useEffect","window","addEventListener","removeEventListener","copyBpmToClipboard","bpmInMSFormat","copiedValue","showMilliseconds","navigator","clipboard","writeText","then","title","description","status","duration","isClosable","resetBpm","BTBpmDisplay","isSmallViewport","useBreakpointValue","base","md","viewModel","spacing","onTouchStart","in","fontSize","lg","mb","hasArrow","label","placement","onClick","undefined","cursor","bgGradient","bgClip","initialScale","colorScheme","variant","onMouseDown","e","preventDefault","display","ref","src","tapSound","BTFooter","as","justify","py","alignSelf","href","target","rel","fontWeight","ColorModeSwitcher","toggleColorMode","useColorMode","switchLabel","useColorModeValue","SwitchIcon","FaMoon","FaSun","domProps","size","color","icon","gitHubButtonLabel","BTHeader","isMobileMenuOpen","setIsMobileMenuOpen","VolumeSwitchIcon","FaVolumeUp","FaVolumeMute","volumeSwitchText","checkboxSize","titleSize","buttonFontSize","justifySelf","whiteSpace","checkbox","isChecked","onChange","setShowMilliseconds","volumeControl","setPlayAudio","ml","gitHubButton","leftIcon","Link","MobileMenuButton","order","sx","WebkitTapHighlightColor","toggled","toggle","rounded","templateColumns","gap","alignItems","isOpen","onClose","borderBottomWidth","mt","justifyContent","customTheme","theme","config","initialColorMode","App","setColorMode","textAlign","height","maxW","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1882de4.chunk.js","sourcesContent":["import { useToast } from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  BTBpmDisplayViewModel,\n  BTBpmDisplayViewModelProps,\n} from \"./BTBpmDisplayInterfaces\";\n\nlet lastTapTime: number;\nlet lastTapTimeDifferences: number[] = [];\n\nexport const useBTBpmDisplayViewModel = (\n  props: BTBpmDisplayViewModelProps\n): BTBpmDisplayViewModel => {\n  const audioTapRef = useRef<HTMLAudioElement>(null);\n\n  const [bpm, setBpm] = useState<number>(0);\n  const [isCalculating, setCalculating] = useState<boolean>(false);\n\n  const toast = useToast();\n\n  const calculateBpm = () => {\n    // General explanation (as I understand it):\n    // If all taps had 1 second (= 1000ms) between them, then this would equal 60 BPM => This is our point of reference.\n    // => So if all taps had 0.5 seconds time between them, then this would equal 120 BPM for example.\n    // The formula when having the time difference is: 1000 / timeDifference * 60 BPM = tappedBPM\n\n    // 1. Take the time between the last tap and this current tap\n    const currentTapTime = new Date().getTime();\n    const currentTapTimeDifference = currentTapTime - lastTapTime;\n\n    // Do not calculate or set the bpm on the first tap (You need at least two taps to calculate the bpm).\n    if (lastTapTime) {\n      // 2. Store all previous time differences between taps, add them up and divide their sum by their amount to get the average time difference\n\n      // 2.1 Store all previous time differences between taps\n      // Handling arrays as lists in JS: https://alligator.io/js/push-pop-shift-unshift-array-methods/\n      lastTapTimeDifferences.push(currentTapTimeDifference);\n\n      // 2.2 Add up the time differences and divide the sum by the amount of stored time differences to get the average\n      let averageTimeDifference = 0;\n      lastTapTimeDifferences.forEach((timeDifference) => {\n        averageTimeDifference += timeDifference;\n      });\n      averageTimeDifference /= lastTapTimeDifferences.length;\n\n      // 3. Convert the time difference into the corresponding BPM\n      const currentBPM = (1000 / averageTimeDifference) * 60;\n\n      setBpm(currentBPM);\n    }\n\n    lastTapTime = currentTapTime;\n  };\n\n  const resetBpm = () => {\n    lastTapTime = 0;\n    lastTapTimeDifferences = [];\n    setCalculating(false);\n    setBpm(0);\n  };\n\n  const playTapSound = () => {\n    if (audioTapRef.current) {\n      if (audioTapRef.current?.paused) {\n        audioTapRef.current.play().catch(() => {});\n      } else {\n        audioTapRef.current.currentTime = 0;\n      }\n    }\n  };\n\n  const keyDownHandler = useCallback(() => {\n    if (!isCalculating) {\n      setCalculating(true);\n    }\n    calculateBpm();\n\n    if (props.playAudio) {\n      playTapSound();\n    }\n  }, [isCalculating, props.playAudio]);\n\n  const copyBpmToClipboard = () => {\n    const integers = Math.floor(bpm);\n    const bpmPreparedForDecimals = Math.round(bpm * 10000);\n    const amountIntegerDigits = integers.toString().length;\n    const decimalPlaces = bpmPreparedForDecimals\n      .toString()\n      .slice(amountIntegerDigits);\n\n    const bpmInMSFormat = `${integers}.${decimalPlaces}`;\n\n    const copiedValue = props.showMilliseconds\n      ? bpmInMSFormat\n      : Math.round(bpm).toString();\n\n    navigator.clipboard\n      .writeText(copiedValue)\n      .then(() => {\n        toast({\n          title: \"BPM Copied!\",\n          description: \"The BPM were copied to your clipboard.\",\n          status: \"info\",\n          duration: 9000,\n          isClosable: true,\n        });\n      })\n      .catch(() => {\n        toast({\n          title: \"Something went wrong.\",\n          description: \"The BPM could not be copied to your clipboard.\",\n          status: \"error\",\n          duration: 9000,\n          isClosable: true,\n        });\n      });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDownHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownHandler);\n    };\n  }, [keyDownHandler]);\n\n  return {\n    isCalculating,\n    copyBpmToClipboard,\n    bpm,\n    resetBpm,\n    audioTapRef,\n    keyDownHandler,\n  };\n};\n","export const getBpmInMillisecondFormat = (bpm: number): string => {\n  const integers = Math.floor(bpm);\n  const bpmPreparedForDecimals = Math.round(bpm * 10000);\n  const amountIntegerDigits = integers.toString().length;\n  const decimalPlaces = bpmPreparedForDecimals\n    .toString()\n    .slice(amountIntegerDigits);\n\n  return `${integers}.${decimalPlaces || \"0000\"}`;\n};\n","export const textGradient = \"linear(to-r, teal.300, blue.400)\";\n","export default __webpack_public_path__ + \"static/media/tap-sound.2fc7e0f6.wav\";","import {\n  Button,\n  Collapse,\n  Kbd,\n  ScaleFade,\n  Stat,\n  StatHelpText,\n  StatNumber,\n  Text,\n  Tooltip,\n  useBreakpointValue,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { getBpmInMillisecondFormat } from \"../../helpers/getBpmInMillisecondFormat\";\nimport { textGradient } from \"../../helpers/getTextGradient\";\nimport tapSound from \"../../resources/sounds/tap-sound.wav\";\nimport {\n  BTBpmDisplayProps,\n  BTBpmDisplayViewModel,\n  BTBpmDisplayViewModelProps,\n} from \"./BTBpmDisplayInterfaces\";\nimport { useBTBpmDisplayViewModel } from \"./BTBpmDisplayViewModel\";\n\nfunction BTBpmDisplay(props: BTBpmDisplayProps): JSX.Element {\n  const isSmallViewport = useBreakpointValue({ base: true, md: false });\n\n  const viewModelProps: BTBpmDisplayViewModelProps = props;\n  const viewModel: BTBpmDisplayViewModel =\n    useBTBpmDisplayViewModel(viewModelProps);\n  const {\n    isCalculating,\n    copyBpmToClipboard,\n    bpm,\n    resetBpm,\n    audioTapRef,\n    keyDownHandler,\n  } = viewModel;\n\n  return (\n    <>\n      <VStack\n        spacing={3}\n        onTouchStart={() => {\n          keyDownHandler();\n        }}\n      >\n        <Collapse in={!isCalculating}>\n          <Text fontSize={{ base: \"md\", md: \"xl\", lg: \"2xl\" }} mb={3}>\n            Tap any key to start ⌨️\n          </Text>\n          <Text fontSize={{ base: \"xs\", md: \"sm\", lg: \"md\" }}>\n            💡 For example the <Kbd>Spacebar</Kbd>\n          </Text>\n        </Collapse>\n        <Tooltip hasArrow label=\"Click to copy\" placement=\"right\">\n          <Stat\n            onClick={isSmallViewport ? undefined : copyBpmToClipboard}\n            cursor=\"copy\"\n          >\n            <StatNumber\n              fontSize={{ base: \"7xl\", md: \"8xl\", lg: \"9xl\" }}\n              bgGradient={textGradient}\n              bgClip=\"text\"\n            >\n              {props.showMilliseconds\n                ? getBpmInMillisecondFormat(bpm)\n                : Math.round(bpm)}\n            </StatNumber>\n            <StatHelpText fontSize={{ base: \"lg\", md: \"xl\", lg: \"2xl\" }}>\n              BPM\n            </StatHelpText>\n          </Stat>\n        </Tooltip>\n        <ScaleFade initialScale={0.9} in={isCalculating}>\n          {/* `e.preventDefault()` in `onMouseDown` will prevent focusing the button after it is clicked\n          This is important when users use the spacebar or enter for tapping, as having it focussed would lead\n          to problems then */}\n          <Button\n            colorScheme=\"blue\"\n            variant=\"outline\"\n            onMouseDown={(e) => e.preventDefault()}\n            onClick={isCalculating ? resetBpm : undefined}\n            cursor={isCalculating ? undefined : \"default\"}\n            display={isCalculating ? undefined : \"none\"}\n          >\n            Reset\n          </Button>\n        </ScaleFade>\n      </VStack>\n      {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n      <audio ref={audioTapRef} src={tapSound} />\n    </>\n  );\n}\n\nexport default BTBpmDisplay;\n","import { Flex, Link } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { textGradient } from \"../../helpers/getTextGradient\";\n\nexport const BTFooter = (): JSX.Element => (\n  <Flex as=\"footer\" justify=\"center\" py={3} alignSelf=\"flex-end\">\n    <Link\n      href=\"https://www.cbussick.dev/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      bgGradient={textGradient}\n      bgClip=\"text\"\n      fontWeight=\"semibold\"\n      fontSize={{ base: \"md\", md: \"lg\", lg: \"xl\" }}\n    >\n      Made by Christopher Bussick\n    </Link>\n  </Flex>\n);\n","import {\n  IconButton,\n  Tooltip,\n  useColorMode,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\nimport { ColorModeSwitcherProps } from \"./ColorModeSwitcherInterfaces\";\n\nexport const ColorModeSwitcher = (\n  props: ColorModeSwitcherProps\n): JSX.Element => {\n  const { toggleColorMode } = useColorMode();\n  const switchLabel = `Switch to ${useColorModeValue(\"dark\", \"light\")} mode`;\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  const { isSmallViewport, ...domProps } = props;\n\n  return (\n    <Tooltip hasArrow label={switchLabel}>\n      <IconButton\n        size=\"md\"\n        fontSize={{ base: \"sm\", md: \"md\", lg: \"lg\" }}\n        variant={isSmallViewport ? \"outline\" : \"ghost\"}\n        color=\"current\"\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label={switchLabel}\n        {...domProps}\n      />\n    </Tooltip>\n  );\n};\n","import {\n  Box,\n  Button,\n  Checkbox,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Grid,\n  Heading,\n  HStack,\n  IconButton,\n  Link,\n  Spacer,\n  Stack,\n  Tooltip,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\nimport { Rotate as Hamburger } from \"hamburger-react\";\nimport React, { useState } from \"react\";\nimport { FaGithub, FaVolumeMute, FaVolumeUp } from \"react-icons/fa\";\nimport { textGradient } from \"../../helpers/getTextGradient\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher/ColorModeSwitcher\";\nimport { BTHeaderProps } from \"./BTHeaderInterfaces\";\n\nconst gitHubButtonLabel = \"Repo on GitHub\";\n\nexport const BTHeader = (props: BTHeaderProps): JSX.Element => {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState<boolean>(false);\n\n  const VolumeSwitchIcon = props.playAudio ? FaVolumeUp : FaVolumeMute;\n  const volumeSwitchText = `Turn volume ${props.playAudio ? \"off\" : \"on\"}`;\n\n  const checkboxSize = useBreakpointValue({ base: \"md\", lg: \"lg\" });\n  const titleSize = useBreakpointValue({ base: \"md\", lg: \"lg\" });\n  const buttonFontSize = useBreakpointValue({ base: \"lg\" });\n\n  const isSmallViewport = useBreakpointValue({ base: true, md: false });\n\n  const title = (\n    <Heading\n      size={titleSize}\n      bgGradient={textGradient}\n      bgClip=\"text\"\n      justifySelf=\"center\"\n      whiteSpace=\"nowrap\"\n    >\n      BPM tapper\n    </Heading>\n  );\n\n  const checkbox = (\n    <Checkbox\n      isChecked={props.showMilliseconds}\n      onChange={() =>\n        props.setShowMilliseconds((showMilliseconds) => !showMilliseconds)\n      }\n      size={checkboxSize}\n      whiteSpace=\"nowrap\"\n    >\n      Show milliseconds\n    </Checkbox>\n  );\n\n  const volumeControl = (\n    <Tooltip hasArrow label={volumeSwitchText}>\n      <IconButton\n        variant={isSmallViewport ? \"outline\" : \"ghost\"}\n        aria-label={volumeSwitchText}\n        icon={<VolumeSwitchIcon />}\n        onClick={() => props.setPlayAudio((playAudio) => !playAudio)}\n        fontSize={buttonFontSize}\n        ml={isSmallViewport ? undefined : 4}\n      />\n    </Tooltip>\n  );\n\n  const gitHubButton = (\n    <Tooltip hasArrow label={gitHubButtonLabel}>\n      {isSmallViewport ? (\n        <Button\n          leftIcon={<FaGithub />}\n          colorScheme=\"blue\"\n          variant=\"link\"\n          fontWeight=\"normal\"\n          // Necessary to have a working link\n          as={Link}\n          href=\"https://github.com/ChristopherBussick/bpm-tapper\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {gitHubButtonLabel}\n        </Button>\n      ) : (\n        <IconButton\n          variant=\"ghost\"\n          aria-label={gitHubButtonLabel}\n          icon={<FaGithub />}\n          fontSize={buttonFontSize}\n          as={Link}\n          href=\"https://github.com/ChristopherBussick/bpm-tapper\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        />\n      )}\n    </Tooltip>\n  );\n\n  const MobileMenuButton = (\n    <Box\n      order={-1}\n      sx={{\n        \".hamburger-react\": {\n          // Remove blue flashing when tapping the mobile menu icon\n          //\n          // Note: This property is non-standard as of 2021.11.01\n          // See https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-tap-highlight-color\n          WebkitTapHighlightColor: \"transparent\",\n        },\n      }}\n    >\n      <Hamburger\n        toggled={isMobileMenuOpen}\n        toggle={setIsMobileMenuOpen}\n        label={isMobileMenuOpen ? \"Close menu\" : \"Show menu\"}\n        size={isSmallViewport ? 24 : 32}\n        rounded\n      />\n    </Box>\n  );\n\n  return (\n    <Grid\n      as=\"header\"\n      templateColumns=\"repeat(3, 1fr)\"\n      gap={6}\n      py={2}\n      alignSelf=\"flex-start\"\n      alignItems=\"center\"\n    >\n      {!isSmallViewport && <Spacer />}\n      {title}\n      {isSmallViewport ? (\n        MobileMenuButton\n      ) : (\n        <Flex justifySelf=\"flex-end\">\n          {checkbox}\n          {volumeControl}\n          {gitHubButton}\n          <ColorModeSwitcher isSmallViewport={isSmallViewport} />\n        </Flex>\n      )}\n      <Drawer\n        isOpen={isMobileMenuOpen}\n        placement=\"left\"\n        onClose={() => setIsMobileMenuOpen(false)}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">{title}</DrawerHeader>\n\n          <DrawerBody mt={2}>\n            <Stack spacing={4} alignItems=\"flex-start\">\n              {checkbox}\n              <HStack>\n                {volumeControl}\n                <ColorModeSwitcher isSmallViewport={isSmallViewport} />\n              </HStack>\n              {gitHubButton}\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter justifyContent=\"flex-start\">\n            <Link\n              href=\"https://www.cbussick.dev/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              bgGradient={textGradient}\n              bgClip=\"text\"\n              fontWeight=\"semibold\"\n              fontSize={{ base: \"md\", md: \"lg\", lg: \"xl\" }}\n            >\n              Made by Christopher Bussick\n            </Link>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </Grid>\n  );\n};\n","import { Theme, theme } from \"@chakra-ui/react\";\n\nexport const customTheme: Theme = {\n  ...theme,\n  config: {\n    ...theme.config,\n    initialColorMode: \"dark\",\n  },\n};\n","import { Box, Container, Grid, Text, useColorMode } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport BTBpmDisplay from \"./components/BTBpmDisplay/BTBpmDisplay\";\nimport { BTFooter } from \"./components/BTFooter/BTFooter\";\nimport { BTHeader } from \"./components/BTHeader/BTHeader\";\nimport { customTheme } from \"./theme/customTheme\";\n\nexport const App = (): JSX.Element => {\n  const [showMilliseconds, setShowMilliseconds] = useState<boolean>(false);\n  const [playAudio, setPlayAudio] = useState<boolean>(true);\n\n  const { setColorMode } = useColorMode();\n\n  useEffect(() => {\n    // For whatever reason, when having `initialColorMode === \"dark\"` it directly switches back to \"light\".\n    // This is a workaround, to manually set it to dark mode on the first render of the app.\n    if (customTheme.config.initialColorMode === \"dark\") {\n      setColorMode(\"dark\");\n    }\n  }, [setColorMode]);\n\n  return (\n    <Box textAlign=\"center\" height=\"100vh\">\n      <Grid templateColumns=\"repeat(1fr, 3)\" gap={6} height=\"100%\">\n        <BTHeader\n          showMilliseconds={showMilliseconds}\n          setShowMilliseconds={setShowMilliseconds}\n          playAudio={playAudio}\n          setPlayAudio={setPlayAudio}\n        />\n\n        <Container maxW=\"8xl\">\n          <Text fontSize={{ base: \"lg\", md: \"3xl\", lg: \"4xl\" }} mb={9}>\n            Tap along to any song to figure out its tempo! 🎵\n          </Text>\n\n          <BTBpmDisplay\n            playAudio={playAudio}\n            showMilliseconds={showMilliseconds}\n          />\n        </Container>\n\n        <BTFooter />\n      </Grid>\n    </Box>\n  );\n};\n","import { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { customTheme } from \"./theme/customTheme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={customTheme.config.initialColorMode} />\n    <ChakraProvider theme={customTheme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}